{"version":3,"file":"static/js/975.dad44c35.chunk.js","mappings":"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","sources":["webpack://covid-vaccination-status/./src/components/Table/table.module.scss?3b76","components/Table/index.tsx","components/Chart/index.tsx","components/DropdownField/index.tsx","constants/visualizationTableColumn.tsx","pages/Visualization/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tableWidth\":\"table_tableWidth__wyZcY\"};","import React from \"react\";\r\nimport style from \"./table.module.scss\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Column } from \"primereact/column\";\r\nimport \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/primereact.css\";\r\n\r\ninterface IDataProps {\r\n  data: any;\r\n  columns: object[];\r\n  editButton?: (e: any) => void;\r\n}\r\n\r\nfunction Table({ data, columns, editButton }: IDataProps) {\r\n  return (\r\n    <div>\r\n      <div className={`${style.tableWidth}`}>\r\n        <DataTable\r\n          value={data}\r\n          rows={10}\r\n          paginator\r\n          paginatorTemplate=\"CurrentPageReport PrevPageLink PageLinks NextPageLink\"\r\n          currentPageReportTemplate=\"Showing {first} - {last} of {totalRecords}\"\r\n        >\r\n          {columns.map((value: any) => (\r\n            <Column field={value.field} header={value.header} key={value.key} />\r\n          ))}\r\n          {editButton && <Column header=\"Edit\" body={editButton} />}\r\n        </DataTable>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MemoizedTable = React.memo(Table);\r\nexport default MemoizedTable;\r\n","import React from \"react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\r\n\r\ninterface IChart {\r\n  chartData: any;\r\n  chartKey: string;\r\n  dataKey1: string;\r\n  dataKey2: string;\r\n  dataKey3: string;\r\n  width: number;\r\n  height: number;\r\n  barSize: number;\r\n}\r\n\r\nfunction Chart({\r\n  chartData,\r\n  chartKey,\r\n  dataKey1,\r\n  dataKey2,\r\n  dataKey3,\r\n  width,\r\n  height,\r\n  barSize,\r\n}: IChart) {\r\n  return (\r\n    <BarChart\r\n      width={width}\r\n      height={height}\r\n      data={chartData}\r\n      margin={{\r\n        top: 20,\r\n        right: 30,\r\n        left: 20,\r\n        bottom: 5,\r\n      }}\r\n      barSize={barSize}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey={chartKey} />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Bar dataKey={dataKey1} stackId=\"a\" fill=\"#82ca9d\" />\r\n      <Bar dataKey={dataKey2} stackId=\"b\" fill=\"#8884d8\" />\r\n      <Bar dataKey={dataKey3} stackId=\"b\" fill=\"#ffc658\" />\r\n    </BarChart>\r\n  );\r\n}\r\n\r\nconst MemoizedChart = React.memo(Chart);\r\nexport default MemoizedChart;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\n// Dropdown placeholder CSS\r\nconst placeholderStyles = {\r\n  placeholder: (provided: any, state: any) => ({\r\n    ...provided,\r\n    fontSize: 12,\r\n  }),\r\n};\r\n\r\n// Interface for Dropdown field\r\ninterface IDropdownProps {\r\n  label: string;\r\n  value: any;\r\n  handleOnChange: (e: any) => void;\r\n  disable: boolean;\r\n  spacingClasses: string;\r\n  labelClasses: string;\r\n  placeholder: string;\r\n  elementClasses: string;\r\n  options: any;\r\n}\r\n\r\n// Function used to render Dropdown Field\r\nfunction DropdownField({\r\n  value,\r\n  handleOnChange,\r\n  disable,\r\n  spacingClasses,\r\n  labelClasses,\r\n  placeholder,\r\n  elementClasses,\r\n  label,\r\n  options,\r\n}: IDropdownProps): any {\r\n  const unSelectedOptions: any = [];\r\n\r\n  // Info: filterting unselected options\r\n  options &&\r\n    options.map((opt: any) => {\r\n      if (!(value && value.value === opt.value)) {\r\n        unSelectedOptions.push({ label: opt.label, value: opt.value });\r\n      } else if (!value) {\r\n        unSelectedOptions.push({ label: opt.label, value: opt.value });\r\n      }\r\n    });\r\n\r\n  // Function to change dropdown option based on select\r\n  const changeState = (sourceTypeOption: any) =>\r\n    handleOnChange(sourceTypeOption);\r\n\r\n  return (\r\n    <div className={`${spacingClasses}`}>\r\n      {label && <label className={`${labelClasses}`}>{label}</label>}\r\n      <Select\r\n        value={value}\r\n        onChange={changeState}\r\n        options={unSelectedOptions}\r\n        placeholder={placeholder}\r\n        styles={placeholderStyles}\r\n        className={elementClasses}\r\n        isDisabled={disable}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst MemoizedDropdownField = React.memo(DropdownField);\r\nexport default MemoizedDropdownField;\r\n","const visualizationTableColumns = [\r\n  {\r\n    field: \"city\",\r\n    header: \"City\",\r\n    key: 1,\r\n  },\r\n  {\r\n    field: \"totalPopulation\",\r\n    header: \"Total Population\",\r\n    key: 2,\r\n  },\r\n  {\r\n    field: \"vaccinatedPopulation\",\r\n    header: \"Vaccinated Population\",\r\n    key: 3,\r\n  },\r\n  {\r\n    field: \"dosesAvailable\",\r\n    header: \"Doses Available\",\r\n    key: 4,\r\n  },\r\n];\r\nexport default visualizationTableColumns;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"primereact/button\";\r\nimport { ToggleButton } from \"primereact/togglebutton\";\r\n// Redux imports\r\nimport { visulizationActions } from \"./visualizationSlice\";\r\n// Component Imports\r\nimport Table from \"../../components/Table\";\r\nimport Chart from \"../../components/Chart\";\r\nimport DropdownField from \"../../components/DropdownField\";\r\n// Constant Imports\r\nimport appConstants from \"../../constants/appConstants\";\r\nimport visualizationTableColumns from \"../../constants/visualizationTableColumn\";\r\n\r\nexport default function Visualization() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  let countriesVaccinationStatusList: any = null;\r\n  countriesVaccinationStatusList = useSelector(\r\n    (state: any) =>\r\n      state &&\r\n      state.visualization &&\r\n      state.visualization.countriesVaccinationStatus\r\n  );\r\n\r\n  // Storing the zeroth value in country and state dropdown\r\n  const [country, setCountry] = useState<any>({\r\n    label:\r\n      countriesVaccinationStatusList &&\r\n      Object.keys(countriesVaccinationStatusList)[0],\r\n    value:\r\n      countriesVaccinationStatusList &&\r\n      Object.keys(countriesVaccinationStatusList)[0],\r\n  });\r\n  const [state, setState] = useState<any>({\r\n    label:\r\n      countriesVaccinationStatusList &&\r\n      country &&\r\n      Object.keys(countriesVaccinationStatusList[country.value])[0],\r\n    value:\r\n      countriesVaccinationStatusList &&\r\n      Object.keys(countriesVaccinationStatusList[country.value])[0],\r\n  });\r\n  const [displayTable, setDisplayTable] = useState(true);\r\n\r\n  // Info: Initially making API call to get countries Vaccination status data\r\n  useEffect(() => {\r\n    if (\r\n      countriesVaccinationStatusList == null ||\r\n      Object.keys(countriesVaccinationStatusList).length === 0\r\n    )\r\n      dispatch(visulizationActions.getCountriesVaccinationStatusRequest());\r\n  }, []);\r\n\r\n  // Info: Storing Country List\r\n  let countryList: any = [];\r\n  Object.keys(countriesVaccinationStatusList).forEach((country: any) => {\r\n    countryList.push({ label: country, value: country });\r\n  });\r\n\r\n  // Info: Storing State  List\r\n  let stateList: any = [];\r\n  countriesVaccinationStatusList &&\r\n    country &&\r\n    Object.keys(countriesVaccinationStatusList[country.value]).forEach(\r\n      (state: any) => {\r\n        stateList.push({ label: state, value: state });\r\n      }\r\n    );\r\n\r\n  // Updating state dropdown when ever country is changed\r\n  useEffect(() => {\r\n    setState({\r\n      label:\r\n        countriesVaccinationStatusList &&\r\n        country &&\r\n        Object.keys(countriesVaccinationStatusList[country.value])[0],\r\n      value:\r\n        countriesVaccinationStatusList &&\r\n        Object.keys(countriesVaccinationStatusList[country.value])[0],\r\n    });\r\n  }, [country]);\r\n\r\n  // Info: Storing City List\r\n  let cityList: any = [];\r\n  cityList =\r\n    countriesVaccinationStatusList &&\r\n    country &&\r\n    state &&\r\n    countriesVaccinationStatusList[country.value][state.value];\r\n\r\n  // Function to render Edit button\r\n  const editButton = (rowData: any) => {\r\n    return (\r\n      <Button\r\n        type=\"button\"\r\n        onClick={() =>\r\n          navigate(\"/edit\", { state: { rowData, cityList, country, state } })\r\n        }\r\n        icon=\"pi pi-fw pi-pencil\"\r\n      ></Button>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <p>{appConstants.HELP_TEXT}</p>\r\n        <div className=\"row\">\r\n          <div className=\"col-4\">\r\n            <DropdownField\r\n              value={country}\r\n              handleOnChange={setCountry}\r\n              disable={false}\r\n              spacingClasses=\"\"\r\n              labelClasses=\"\"\r\n              placeholder=\"Select Country\"\r\n              elementClasses=\"\"\r\n              label=\"\"\r\n              options={countryList}\r\n            />\r\n          </div>\r\n          <div className=\"col-4\">\r\n            {/* Country has to be selected to display state dropdown */}\r\n            {country && (\r\n              <DropdownField\r\n                value={state}\r\n                handleOnChange={setState}\r\n                disable={false}\r\n                spacingClasses=\"\"\r\n                labelClasses=\"\"\r\n                placeholder=\"Select State\"\r\n                elementClasses=\"\"\r\n                label=\"\"\r\n                options={stateList}\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"col-4 text-center\">\r\n            {/* State has to be selected to display Toggle  */}\r\n            {state && (\r\n              <ToggleButton\r\n                checked={displayTable}\r\n                onChange={() => setDisplayTable(!displayTable)}\r\n                onLabel={appConstants.CHART_DISPLAY}\r\n                offLabel={appConstants.TABLE_DISPLAY}\r\n                style={{ width: \"15rem\" }}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {state && (\r\n          <h2>\r\n            {state && state.label}'s\r\n            {appConstants.VISUALIZATION_PAGE_HEADER}\r\n          </h2>\r\n        )}\r\n\r\n        {/* Info: Displaying Table after state is selected and displayTable state has to be true */}\r\n        {state && displayTable && (\r\n          <Table\r\n            data={cityList}\r\n            columns={visualizationTableColumns}\r\n            editButton={editButton}\r\n          />\r\n        )}\r\n\r\n        {/* Info: Displaying Chart after state is selected and displayTable state has to be false */}\r\n        {state && !displayTable && (\r\n          <Chart\r\n            chartData={cityList}\r\n            chartKey=\"city\"\r\n            dataKey1=\"totalPopulation\"\r\n            dataKey2=\"vaccinatedPopulation\"\r\n            dataKey3=\"dosesAvailable\"\r\n            width={1500}\r\n            height={650}\r\n            barSize={40}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Table","data","columns","editButton","className","style","value","rows","paginator","paginatorTemplate","currentPageReportTemplate","map","field","header","key","body","React","Chart","chartData","chartKey","dataKey1","dataKey2","dataKey3","width","height","barSize","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","stackId","fill","placeholderStyles","placeholder","provided","state","fontSize","DropdownField","handleOnChange","disable","spacingClasses","labelClasses","elementClasses","label","options","unSelectedOptions","opt","push","onChange","sourceTypeOption","styles","isDisabled","Visualization","countriesVaccinationStatusList","navigate","useNavigate","dispatch","useDispatch","useSelector","visualization","countriesVaccinationStatus","useState","Object","keys","country","setCountry","setState","displayTable","setDisplayTable","useEffect","length","visulizationActions","countryList","forEach","stateList","cityList","appConstants","checked","onLabel","offLabel","visualizationTableColumns","rowData","type","onClick","icon"],"sourceRoot":""}